<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Apr 17 09:53:30 2019
<BR><P>
<H3>Maximum Stack Usage =        752 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
bootloader_copy_prepare &rArr; bootloader_upgrade &rArr; upgrade &rArr; lzma_update &rArr; Decode &rArr; Decode2 &rArr; LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[14]">AHBDMA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">AHBDMA_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">AHBDMA_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[17]">EXIF_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[1c]">FileOutStream_Write</a> from 7zFile.o(i.FileOutStream_Write) referenced from 7zFile.o(i.FileOutStream_CreateVTable)
 <LI><a href="#[1d]">FileSeqInStream_Read</a> from 7zFile.o(i.FileSeqInStream_Read) referenced from 7zFile.o(i.FileSeqInStream_CreateVTable)
 <LI><a href="#[f]">GPIO_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[18]">I2C_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[12]">MACHW_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[15]">PSRAM_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[b]">PTA_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[c]">SDIO_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[16]">SDMMC_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[a]">SPIFLASH_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[1a]">SystemInit</a> from system_rda5981.o(i.SystemInit) referenced from startup_rda5981.o(.text)
 <LI><a href="#[22]">SzAlloc</a> from alloc.o(i.SzAlloc) referenced from alloc.o(.constdata)
 <LI><a href="#[23]">SzFree</a> from alloc.o(i.SzFree) referenced from alloc.o(.constdata)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[d]">USBDMA_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[e]">USB_IRQHandler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_rda5981.o(.text) referenced from startup_rda5981.o(RESET)
 <LI><a href="#[1b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_rda5981.o(.text)
 <LI><a href="#[21]">bootloader_copy_go</a> from bootloader_copy.o(i.bootloader_copy_go) referenced from bootloader.o(.constdata)
 <LI><a href="#[1f]">bootloader_copy_prepare</a> from bootloader_copy.o(i.bootloader_copy_prepare) referenced from bootloader.o(.constdata)
 <LI><a href="#[20]">bootloader_copy_select</a> from bootloader_copy.o(i.bootloader_copy_select) referenced from bootloader.o(.constdata)
 <LI><a href="#[1e]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[19]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>AHBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBDMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHBDMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MACHW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PSRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SDMMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPIFLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_rda5981.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[6f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Read
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf_Write
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToBuf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_prepare_boot_addr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToDic
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[75]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[76]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>FileOutStream_CreateVTable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 7zFile.o(i.FileOutStream_CreateVTable))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[63]"></a>FileSeqInStream_CreateVTable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 7zFile.o(i.FileSeqInStream_CreateVTable))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[3a]"></a>File_Read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, 7zFile.o(i.File_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = File_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeqInStream_Read
</UL>

<P><STRONG><a name="[39]"></a>File_Write_Buf</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, 7zFile.o(i.File_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = File_Write_Buf &rArr; Buf_Write &rArr; Flash_Write &rArr; flash_write &rArr; program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOutStream_Write
</UL>

<P><STRONG><a name="[65]"></a>InFile_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 7zFile.o(i.InFile_Close))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[3c]"></a>InFile_Open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 7zFile.o(i.InFile_Open))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[33]"></a>LzmaDec_Allocate</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lzmaDec.o(i.LzmaDec_Allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LzmaDec_Allocate &rArr; LzmaDec_AllocateProbs2 &rArr; LzmaDec_FreeProbs
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaProps_Decode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_FreeProbs
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_FreeDict
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_AllocateProbs2
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
</UL>

<P><STRONG><a name="[37]"></a>LzmaDec_DecodeToBuf</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, lzmaDec.o(i.LzmaDec_DecodeToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToDic
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode2
</UL>

<P><STRONG><a name="[45]"></a>LzmaDec_DecodeToDic</STRONG> (Thumb, 504 bytes, Stack size 64 bytes, lzmaDec.o(i.LzmaDec_DecodeToDic))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_WriteRem
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_TryDummy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeReal2
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToBuf
</UL>

<P><STRONG><a name="[35]"></a>LzmaDec_Free</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lzmaDec.o(i.LzmaDec_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LzmaDec_Free &rArr; LzmaDec_FreeProbs
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_FreeProbs
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
</UL>

<P><STRONG><a name="[41]"></a>LzmaDec_FreeProbs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lzmaDec.o(i.LzmaDec_FreeProbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LzmaDec_FreeProbs
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Free
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Allocate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_AllocateProbs2
</UL>

<P><STRONG><a name="[36]"></a>LzmaDec_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lzmaDec.o(i.LzmaDec_Init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode2
</UL>

<P><STRONG><a name="[77]"></a>LzmaDec_InitDicAndState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lzmaDec.o(i.LzmaDec_InitDicAndState), UNUSED)

<P><STRONG><a name="[3e]"></a>LzmaProps_Decode</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lzmaDec.o(i.LzmaProps_Decode))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Allocate
</UL>

<P><STRONG><a name="[47]"></a>MyAlloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alloc.o(i.MyAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MyAlloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SzAlloc
</UL>

<P><STRONG><a name="[49]"></a>OutFile_Close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, 7zFile.o(i.OutFile_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OutFile_Close &rArr; Flash_Write &rArr; flash_write &rArr; program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[4a]"></a>OutFile_Open</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, 7zFile.o(i.OutFile_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OutFile_Open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Open
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[32]"></a>SeqInStream_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 7zStream.o(i.SeqInStream_Read))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
</UL>

<P><STRONG><a name="[78]"></a>SeqInStream_Read2</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, 7zStream.o(i.SeqInStream_Read2), UNUSED)

<P><STRONG><a name="[1a]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_rda5981.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_rda5981.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[79]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[2e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf_Write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutFile_Open
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintError
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_is_valid
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_is_valid
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_prepare_boot_addr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_halfbyte
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_copy_go
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_main
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[51]"></a>board_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.board_init))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>bootloader_copy_go</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bootloader_copy.o(i.bootloader_copy_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bootloader_copy_go &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>bootloader_copy_prepare</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bootloader_copy.o(i.bootloader_copy_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = bootloader_copy_prepare &rArr; bootloader_upgrade &rArr; upgrade &rArr; lzma_update &rArr; Decode &rArr; Decode2 &rArr; LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_prepare_boot_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>bootloader_copy_select</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bootloader_copy.o(i.bootloader_copy_select))
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>bootloader_main</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bootloader.o(i.bootloader_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bootloader_main &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>check_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rda_api.o(i.check_align))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash
</UL>

<P><STRONG><a name="[5c]"></a>crc32_halfbyte</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, crc32.o(i.crc32_halfbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crc32_halfbyte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_is_valid
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_is_valid
</UL>

<P><STRONG><a name="[5d]"></a>erase_flash</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rda_api.o(i.erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = erase_flash &rArr; rda5981_spi_erase_partition &rArr; rda5981_spi_flash_erase_64KB_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rda5981_spi_erase_partition
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_align
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[56]"></a>flash_erase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_erase &rArr; erase_flash &rArr; rda5981_spi_erase_partition &rArr; rda5981_spi_flash_erase_64KB_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_prepare_boot_addr
</UL>

<P><STRONG><a name="[68]"></a>flash_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
</UL>

<P><STRONG><a name="[67]"></a>flash_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
</UL>

<P><STRONG><a name="[3b]"></a>flash_write</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, flash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_write &rArr; program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_flash
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_prepare_boot_addr
</UL>

<P><STRONG><a name="[1e]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; uart_console_output
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[4c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SzFree
</UL>

<P><STRONG><a name="[62]"></a>lzma_update</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, lzma.o(i.lzma_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lzma_update &rArr; Decode &rArr; Decode2 &rArr; LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutFile_Open
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutFile_Close
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFile_Open
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFile_Close
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeqInStream_CreateVTable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOutStream_CreateVTable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintError
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
</UL>

<P><STRONG><a name="[19]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; bootloader_main &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[48]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyAlloc
</UL>

<P><STRONG><a name="[60]"></a>program_flash</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rda_api.o(i.program_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_align
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[5f]"></a>rda5981_spi_erase_partition</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rda_api.o(i.rda5981_spi_erase_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rda5981_spi_erase_partition &rArr; rda5981_spi_flash_erase_64KB_block
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rda5981_spi_flash_erase_64KB_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash
</UL>

<P><STRONG><a name="[66]"></a>rda5981_spi_flash_erase_64KB_block</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rda_api.o(i.rda5981_spi_flash_erase_64KB_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rda5981_spi_flash_erase_64KB_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rda5981_spi_erase_partition
</UL>

<P><STRONG><a name="[61]"></a>uart_console_output</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, drv_uart.o(i.uart_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[52]"></a>uart_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_uart.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[53]"></a>bootloader_prepare_boot_addr</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, bootloader_copy.o(i.bootloader_prepare_boot_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bootloader_prepare_boot_addr &rArr; flash_write &rArr; program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_copy_prepare
</UL>

<P><STRONG><a name="[54]"></a>bootloader_upgrade</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, bootloader_copy.o(i.bootloader_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = bootloader_upgrade &rArr; upgrade &rArr; lzma_update &rArr; Decode &rArr; Decode2 &rArr; LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_is_valid
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firmware_is_valid
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_copy_prepare
</UL>

<P><STRONG><a name="[58]"></a>firmware_is_valid</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bootloader_copy.o(i.firmware_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = firmware_is_valid &rArr; crc32_halfbyte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_halfbyte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
</UL>

<P><STRONG><a name="[5b]"></a>upgrade</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, bootloader_copy.o(i.upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = upgrade &rArr; lzma_update &rArr; Decode &rArr; Decode2 &rArr; LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_halfbyte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
</UL>

<P><STRONG><a name="[59]"></a>upgrade_is_valid</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bootloader_copy.o(i.upgrade_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = upgrade_is_valid &rArr; crc32_halfbyte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_halfbyte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_upgrade
</UL>

<P><STRONG><a name="[31]"></a>Decode</STRONG> (Thumb, 112 bytes, Stack size 168 bytes, lzma.o(i.Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Decode &rArr; Decode2 &rArr; LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeqInStream_Read
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Free
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Allocate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode2
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[34]"></a>Decode2</STRONG> (Thumb, 298 bytes, Stack size 80 bytes, lzma.o(i.Decode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Decode2 &rArr; LzmaDec_DecodeToBuf &rArr; LzmaDec_DecodeToDic &rArr; LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToBuf
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_in_out_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
</UL>

<P><STRONG><a name="[4b]"></a>PrintError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lzma.o(i.PrintError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzma_update
</UL>

<P><STRONG><a name="[38]"></a>free_in_out_buffer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lzma.o(i.free_in_out_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_in_out_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode2
</UL>

<P><STRONG><a name="[2d]"></a>Buf_Write</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, 7zFile.o(i.Buf_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Buf_Write &rArr; Flash_Write &rArr; flash_write &rArr; program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Write_Buf
</UL>

<P><STRONG><a name="[1c]"></a>FileOutStream_Write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, 7zFile.o(i.FileOutStream_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FileOutStream_Write &rArr; File_Write_Buf &rArr; Buf_Write &rArr; Flash_Write &rArr; flash_write &rArr; program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Write_Buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 7zFile.o(i.FileOutStream_CreateVTable)
</UL>
<P><STRONG><a name="[1d]"></a>FileSeqInStream_Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 7zFile.o(i.FileSeqInStream_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FileSeqInStream_Read &rArr; File_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 7zFile.o(i.FileSeqInStream_CreateVTable)
</UL>
<P><STRONG><a name="[3d]"></a>File_Open</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 7zFile.o(i.File_Open))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutFile_Open
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFile_Open
</UL>

<P><STRONG><a name="[30]"></a>Flash_Write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 7zFile.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flash_Write &rArr; flash_write &rArr; program_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf_Write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutFile_Close
</UL>

<P><STRONG><a name="[22]"></a>SzAlloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alloc.o(i.SzAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SzAlloc &rArr; MyAlloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alloc.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>SzFree</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alloc.o(i.SzFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SzFree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alloc.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>LzmaDec_AllocateProbs2</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lzmaDec.o(i.LzmaDec_AllocateProbs2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LzmaDec_AllocateProbs2 &rArr; LzmaDec_FreeProbs
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_FreeProbs
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Allocate
</UL>

<P><STRONG><a name="[43]"></a>LzmaDec_DecodeReal</STRONG> (Thumb, 4060 bytes, Stack size 152 bytes, lzmaDec.o(i.LzmaDec_DecodeReal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LzmaDec_DecodeReal
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeReal2
</UL>

<P><STRONG><a name="[42]"></a>LzmaDec_DecodeReal2</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lzmaDec.o(i.LzmaDec_DecodeReal2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LzmaDec_DecodeReal2 &rArr; LzmaDec_DecodeReal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_WriteRem
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeReal
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToDic
</UL>

<P><STRONG><a name="[40]"></a>LzmaDec_FreeDict</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lzmaDec.o(i.LzmaDec_FreeDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LzmaDec_FreeDict
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_Allocate
</UL>

<P><STRONG><a name="[46]"></a>LzmaDec_TryDummy</STRONG> (Thumb, 1008 bytes, Stack size 36 bytes, lzmaDec.o(i.LzmaDec_TryDummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LzmaDec_TryDummy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToDic
</UL>

<P><STRONG><a name="[44]"></a>LzmaDec_WriteRem</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, lzmaDec.o(i.LzmaDec_WriteRem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LzmaDec_WriteRem
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeToDic
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzmaDec_DecodeReal2
</UL>

<P><STRONG><a name="[4e]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[50]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
